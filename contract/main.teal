#pragma version 6
// Fund Start Date unixtimestamp
// Fund End Date unixtimestamp
// Fund Goal
// Fund Amount - total
// Creator Address

// check if the app is being created
// if so save creator
int 0
txn ApplicationID
==
bz not_creation
byte "Creator"
txn Sender
app_global_put
//4 args on creation
// transaction will fail
// if 4 args are not passed during creation
txn NumAppArgs
int 5
==
bz failed
byte "StartDate"
txna ApplicationArgs 0
btoi
app_global_put
byte "EndDate"
txna ApplicationArgs 1
btoi
app_global_put
byte "Goal"
txna ApplicationArgs 2
btoi
app_global_put
byte "Receiver"
txna ApplicationArgs 3
app_global_put
byte "Total"
int 0
app_global_put
byte "FundCloseDate"
txna ApplicationArgs 4
btoi
app_global_put
int 1
return
not_creation:
// check if this is deletion transaction
int DeleteApplication
txn OnCompletion
==
bz not_deletion
// To delete the app
// only the creator
// can delete the app
byte "Creator"
app_global_get
txn Sender
==
// check that we are past fund close date
global LatestTimestamp
byte "FundCloseDate"
app_global_get
>=
&&
bz failed
// if escrow balance is zero
// let the app be deleted
// escrow account must be passed
// into the call as an argument
int 0
int 1
balance
==
// if the balance is 0 allow the delete
bnz finished
// if the escrow is not empty then 
// there must be need two transactions
// in a group
global GroupSize
int 2
==
// second tx is an payment
gtxn 1 TypeEnum
int 1
==
&&
// the second payment transaction should be
// a close out transaction to receiver
byte "Receiver"
app_global_get
gtxn 1 CloseRemainderTo
==
&&
// the amount of the payment transaction 
// should be 0
gtxn 1 Amount
int 0
==
&&
// the sender of the payment transaction
// should be the escrow account
byte "Escrow"
app_global_get
gtxn 1 Sender
==
&&
bz failed
int 1
return
not_deletion:
//---
// check if this is update ---
int UpdateApplication
txn OnCompletion
==
bz not_update
// verify that the creator is
// making the call
byte "Creator"
app_global_get
txn Sender
==
// the call should pass the escrow 
// address
txn NumAppArgs
int 1
==
&&
bz failed
// store the address in global state
// this parameter should be addr:
byte "Escrow"
txna ApplicationArgs 0
app_global_put
int 1
return
not_update:
//---
// check for closeout
int CloseOut
txn OnCompletion
==
bnz close_out
// check if no params are
// passed in, which should
// only happen when someone just
// wants to optin
// note the code is written
// to allow opting in and donating with
// one call
int 0
txn NumAppArgs
==
bz check_parms 
// Verify someone is 
// not just opting in
int OptIn
txn OnCompletion
==
bz failed
int 1
return
check_parms:
// donate
txna ApplicationArgs 0
byte "donate"
==
bnz donate
// reclaim
txna ApplicationArgs 0
byte "reclaim" 
==
bnz reclaim
// claim
txna ApplicationArgs 0
byte "claim" 
==
bnz claim
b failed

donate:
// check dates to verify
// in valid range
global LatestTimestamp
byte "StartDate"
app_global_get
>=
global LatestTimestamp
byte "EndDate"
app_global_get
<=
&&
bz failed
// check if grouped with
// two transactions
global GroupSize
int 2
==
// second tx is a payment
gtxn 1 TypeEnum
int 1
==
&&
bz failed
// verify application is receiving 
// second payment tx
global CurrentApplicationAddress
gtxn 1 Receiver
==
bz failed
// increment the total 
// funds raised so far
byte "Total"
app_global_get
gtxn 1 Amount
+
store 1
byte "Total"
load 1
app_global_put
// increment or set giving amount
// for the account that is donating
int 0 //sender
txn ApplicationID
byte "MyAmountGiven"
app_local_get_ex
// store the value
// in the givers local storage
gtxn 1 Amount
+
store 3
int 0 //sender
byte "MyAmountGiven"
load 3
app_local_put
b finished


claim:
// verify that the receiver 
// of the payment transaction
// is the address stored 
// when the fund was created
byte "Creator"
app_global_get
txn Sender
==
bz failed
// verify that the fund end date 
// has passed
global LatestTimestamp
byte "EndDate"
app_global_get
>
bz failed
// verify that the goal was reached
byte "Total"
app_global_get
byte "Goal"
app_global_get
>=
bz failed
itxn_begin
int pay
itxn_field TypeEnum
int 0
itxn_field Amount
txn Sender
itxn_field CloseRemainderTo
itxn_submit
b finished
//dont check amount because
//escrow account may receiver 
//more than the goal
//Could check for total vs tx1 amount

//Fund did not meet total
//Allow ppl to reclaim funds
//may be an issue when the last
//person relcaims because of min balance
//without a closeto
// only 1 relcaim tx is allowed per account
reclaim:
// verfiy that smart contract
// caller is the payment
// transction receiver
int 0
int 0
byte "MyAmountGiven"
app_local_get
<
// verify that fund end date has passed
global LatestTimestamp
byte "EndDate"
app_global_get
>
&&
// verify the fund goal was
// not met
byte "Total"
app_global_get
byte "Goal"
app_global_get
<
&&
bz failed
//check the escrow account total
//--app-account for the escrow
// needs to pass the address
// of the escrow
// check that this is the
// last recoverd donation
// if it is the closeremainderto
// should be set
itxn_begin
int pay
itxn_field TypeEnum
int 0
byte "MyAmountGiven"
app_local_get
txn Fee
-
itxn_field Amount
txn Sender
itxn_field Receiver



byte "Total"
app_global_get
int 0
byte "MyAmountGiven"
app_local_get
<=
bz finish_reclaim
global ZeroAddress
itxn_field CloseRemainderTo
finish_reclaim:
itxn_submit
// decrement the given amount
// of the sender
int 0
byte "MyAmountGiven"
app_local_get
txn Fee
-
store 5
int 0
byte "MyAmountGiven"
load 5
app_local_put
b finished
//call if this is a closeout op
close_out:
int 1
return
failed:
int 0
return
finished:
int 1
return